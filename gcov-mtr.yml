########################################################################
# GCOV report for MTR tests
########################################################################

trigger: none

# Expects SERVER_BRANCH in the environment

jobs:

#########
- job: Build
  pool:
    vmImage: 'Ubuntu 20.04'
  timeoutInMinutes: 0
  strategy:
    parallel: 1

  steps:

  - template: steps/env.yml

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'all'
      EXTRA_PACKAGES: 'lcov'

  - bash: |
      set -x
      if [ -z "$ENV_SERVER_BRANCH" ]; then
        echo "##vso[task.complete result=Failed]\"SERVER_BRANCH\" has not been specified"
      fi
      git clone $SERVER_REPO --branch=$ENV_SERVER_BRANCH $HOME/server
      cd $HOME/server
      current_revno=`git log -1 --abbrev=8 --pretty="%h"`
      if [ -n "$BASELINE_REVISION" ]; then
        baseline_revno=$BASELINE_REVISION
      elif wget $FTP_DOWNLOAD/gcov-last-revno.$ENV_SERVER_BRANCH ; then
        baseline_revno=`cat gcov-last-revno.$ENV_SERVER_BRANCH`
      else
        baseline_revno=`git log -1 ${current_revno}^ --abbrev=8 --pretty="%h"`
      fi
      echo "Baseline revision: $baseline_revno Current_revison: $current_revno"
      if [[ "$baseline_revno" =~ ^"$current_revno" ]] ; then
        echo "##vso[task.complete result=Skipped]Baseline revision is the same as current revision"
      else
        echo $baseline_revno > baseline.revision
      fi
    displayName: 'Prepare and clone'
    env:
      FTP_DOWNLOAD: 'ftp://hasky.askmonty.org/public/azure'
      SERVER_REPO: 'https://github.com/MariaDB/server'
    name: prep

  # Build the server in-source
  - bash: |
      set -x
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 50
      sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 50
      cd $HOME/server
      cmake_options="$ENV_CMAKE_OPTIONS -DCMAKE_BUILD_TYPE=Debug -DENABLE_GCOV=ON"
      cmake . $cmake_options
      make -j5
      for f in pars0lex.l lexyy.cc pars0grm.cc pars0grm.y ; do
        cp storage/innobase/pars/$f storage/innobase/CMakeFiles/innobase.dir/pars/
        if [ -e storage/xtradb/pars/$f ] ; then
          cp storage/xtradb/pars/$f storage/xtradb/CMakeFiles/xtradb.dir/pars/
        fi
      done
      for f in fts0pars.y fts0pars.cc fts0blex.cc fts0blex.l fts0tlex.cc fts0tlex.l ; do
        cp storage/innobase/fts/$f storage/innobase/CMakeFiles/innobase.dir/fts/
        if [ -e storage/xtradb/fts/$f ] ; then
          cp storage/xtradb/fts/$f storage/xtradb/CMakeFiles/xtradb.dir/fts/
        fi
      done
      echo $ENV_SERVER_BRANCH `git log -1 --abbrev=8 --pretty="%h"` > $HOME/server/server.info
      echo $cmake_options >> $HOME/server/server.info
      lcov --directory `pwd` --zerocounters
      cd $HOME/server/mysql-test
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder federated.net_thd_crash-12725,old main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      cd ..
      lcov --directory `pwd` --zerocounters
      cd mysql-test
      perl mysql-test-run.pl --mem --verbose-restart --force --max-test-fail=0 --retry=0 --noreorder main.mysqld--defaults-file
      lcov --version
      gcov --version
      gcc --version
      cd $HOME
      git clone https://github.com/elenst/mariadb-toolbox
      cd server
      rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/*
      infodir=$BUILD_ARTIFACTSTAGINGDIRECTORY/gcov_info
      mkdir $infodir
      baseline_revno=`cat baseline.revision`
      git diff $baseline_revno > $infodir/gcov.diff
      lcov --rc lcov_branch_coverage=1 --quiet --directory $HOME/server --capture --output-file $infodir/lcov.info
      perl $HOME/mariadb-toolbox/scripts/coverage_for_patch.pl --basedir=$HOME/server --diff-file=$infodir/gcov.diff --lcov-info=$infodir/lcov.info --branch-info 1>$infodir/coverage 2>$infodir/missings
      echo "###################"
      echo "# Missing coverage"
      echo "###################"
      cat $infodir/missings
      echo
      perl $HOME/mariadb-toolbox/scripts/coverage_summary.pl $infodir/lcov.info > $infodir/coverage_summary
      echo "###################"
      echo "##### GCOV summary"
      echo "###################"
      cat $infodir/coverage_summary
      echo
    name: gcov_report
    displayName: 'GCOV report'

  - publish: $(Build.ArtifactStagingDirectory)
    artifact: gcov_info
    name: publish_gcov_info

  - bash: |
      rm -rf $BUILD_ARTIFACTSTAGINGDIRECTORY/*
      mv $HOME/server/baseline.revision $BUILD_ARTIFACTSTAGINGDIRECTORY/gcov_baseline_revision_$SERVER_BRANCH
    name: store_baseline

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: gcov_baseline_revision
    displayName: 'Publish baseline'

#########
# Upload to FTP
- template: jobs/upload-to-ftp.yml
  parameters:
    name: 'Upload_new_baseline_to_FTP'
    artifactName: gcov_baseline_revision
    dependencies:
    - 'Build'
    condition: succeeded()
