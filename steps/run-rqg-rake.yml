steps:
  - script: |
      cd $ENV_RQG_HOME
      perl ./combinations.pl \
        --basedir=$ENV_BASEDIR \
        --workdir=$ENV_LOGDIR \
        --config=$ENV_RQG_COMBINATIONS \
        --config-version=$server_version \
        --trials=rake \
        --dry-run | grep 'arguments:' | sed -e 's/.*arguments: //' > combinations.txt
      cat combinations.txt
      NUMBER_OF_COMBINATIONS=`wc -l combinations.txt`
      echo "##vso[task.setvariable variable=number_of_combinations;isOutput=true]${NUMBER_OF_COMBINATIONS}"
    displayName: 'Create and store combinations'

  - ${{ each loop in range(1, variables.number_of_combinations + 1) }}:
    - script: |
        rm -rf $(Build.ArtifactStagingDirectory)/*
        sudo sysctl -w 'kernel.core_pattern=core.%p'
        TRIAL_NO=${{ loop }}
        echo "Trial $TRIAL_NO"
        echo "##vso[task.setvariable variable=TRIAL_NO;isOutput=true]$TRIAL_NO"
        killall -s 9 mysqld mariadbd || true
        rm -rf $ENV_LOGDIR
        mkdir -p $ENV_LOGDIR
        set -xo pipefail
        server_version=`$ENV_BASEDIR/bin/mariadbd --version | grep ' Ver ' | sed -e 's/.* Ver \([1-9][0-9]*\.[0-9]*\).*/\1/'`
        cd $ENV_RQG_HOME
        args=`sed -n "n{trial_no}" combinations.txt`
        export ASAN_OPTIONS="abort_on_error=1:disable_coredump=0:fast_unwind_on_malloc=0:detect_leaks=1"
        # Trying https://github.com/google/sanitizers/issues/1342
        # export LSAN_OPTIONS="use_tls=0"
        # Checking https://github.com/google/sanitizers/issues/1306
        cat /proc/sys/fs/suid_dumpable
        echo 1 | sudo tee /proc/sys/fs/suid_dumpable
        cat /proc/sys/fs/suid_dumpable
        perl ./run.pl $args --vardir=$ENV_LOGDIR/vardir
        test_result=$?
        #
        set -x
        echo "#"
        echo "# Result collection"
        echo "#"
        #
        RUN_ID=$(System.JobPositionInPhase).$TRIAL_NO
        echo "##vso[task.setvariable variable=RUN_ID]$RUN_ID"
        summary_dir=$(Build.ArtifactStagingDirectory)/summary-$(Build.BuildNumber).$RUN_ID
        details_dir=$(Build.ArtifactStagingDirectory)/data-$(Build.BuildNumber).$RUN_ID
        repro_dir=$(Build.ArtifactStagingDirectory)/repro-$(Build.BuildNumber).$RUN_ID
        mkdir -p $summary_dir $details_dir $repro_dir
        cp $ENV_LOGDIR/trial.log $ENV_RQG_HOME/rqg.info $ENV_BASEDIR/server.info $ENV_TOOLBOX_DIR/toolbox.info $summary_dir/
        cp --parents `find $ENV_LOGDIR -name mysql*err* | xargs` $summary_dir/
        cp --parents `find $ENV_LOGDIR -name mbackup*log* | xargs` $summary_dir/
        for c in `find $ENV_LOGDIR -name core*` ; do
          echo "#################### $c ####################" >> $summary_dir/stacktraces
          echo "#################### $c ####################" >> $details_dir/threads
          echo "#################### $c ####################" >> $details_dir/threads_full
          binary=`gdb --batch --eval-command="bt" 1 $c 2>&1 | grep -a 'Core was generated by' | sed -e 's/^Core was generated by \`\([^ ]*\) .*/\1/'`
          echo $binary >> $summary_dir/stacktraces
          echo $binary >> $details_dir/threads
          echo $binary >> $details_dir/threads_full
          gdb --batch --eval-command="bt" $binary $c  | grep -a -v 'New LWP' >> $summary_dir/stacktraces
          gdb --batch --eval-command="thread apply all bt" $binary $c >> $details_dir/threads
          gdb --batch --eval-command="thread apply all bt full" $binary $c >> $details_dir/threads_full
        done
        if [ -e $ENV_LOGDIR/trial.log ] ; then
          result_collection_options="--test-log=$ENV_LOGDIR/trial.log"
        fi
        for d in $ENV_LOGDIR/vardir* ; do
          result_collection_options="$result_collection_options --vardir=$d"
        done
        echo "" >> $summary_dir/test_report
        echo "Test $RUN_ID" >> $summary_dir/test_report
        res=`grep -a 'Test run ends with exit status' $summary_dir/trial.log | sed -e 's/.*Test run ends with exit status STATUS_\([A-Z_]*\).*/\1/'`
        echo "Test result:" $res >> $summary_dir/test_report
        export TEST_RESULT=$res
        echo "Trigger ID:" $(System.DefinitionId)-$(Build.BuildId)-$(Build.BuildNumber).$RUN_ID >> $summary_dir/test_report
        echo "Repro Info:" $(System.DefinitionId)-$(Build.BuildId)-$(Build.BuildNumber).$RUN_ID >> $summary_dir/test_report
        echo "-------------------------------------" >> $summary_dir/test_report
        echo "" >> $summary_dir/test_report
        cp $summary_dir/server.info ./repro.info
        rqg_cmd=`grep -a -A 1 'Final command line' $summary_dir/trial.log | tail -n 1`
        mysqld_options=""
        for o in $rqg_cmd ; do
          if expr match "$o" "--mysqld" > /dev/null ; then
            mysqld_options="$mysqld_options $o"
          elif [ "$o" == "--ps-protocol" ] ; then
            mysqld_options="$mysqld_options $o"
          fi
        done
        echo "" >> repro.info
        echo "RQG command line: $rqg_cmd" >> repro.info
        echo "MySQLd options: $mysqld_options" >> repro.info
        echo `cat $summary_dir/rqg.info` `cat $summary_dir/toolbox.info` >> $summary_dir/test_report
        cat repro.info >> $summary_dir/test_report
        if [ -e $ENV_LOGDIR/vardir/s1/mysql.log ] ; then
          tar zcf $repro_dir/repro.tar.gz repro.info $ENV_LOGDIR/vardir/s1/mysql.log
        elif [ -e $ENV_LOGDIR/vardir/mysql.log ] ; then
          tar zcf $repro_dir/repro.tar.gz repro.info $ENV_LOGDIR/vardir/mysql.log
        else
          tar zcf $repro_dir/repro.tar.gz repro.info
        fi
        export TEST_ID=$(Build.BuildId).$RUN_ID
        echo >> $summary_dir/test_report
        $ENV_TOOLBOX_DIR/scripts/collect_rqg_result_info.sh $result_collection_options > $summary_dir/result_info
        echo "----" >> $summary_dir/result_info
        export SERVER_REVNO=`head -1 $summary_dir/server.info | awk '{print $2}'`
        echo "----" >> $summary_dir/result_info
        echo "Trigger ID:" $(System.DefinitionId)-$(Build.BuildId)-$(Build.BuildNumber).$RUN_ID >> $summary_dir/result_info
        SERVER_BRANCH=$ENV_SERVER_BRANCH perl $ENV_RQG_HOME/util/check_for_known_bugs.pl --signatures=$ENV_RQG_HOME/util/bug_signatures $summary_dir/result_info >> $summary_dir/result_info
        match_search_result=$?
        echo >> $summary_dir/test_report
        echo "#####################################" >> $summary_dir/test_report
        cat $summary_dir/result_info >> $summary_dir/test_report
        echo "#####################################" >> $summary_dir/test_report
        cat $summary_dir/test_report
        #
        if [ "$test_result" != "0" ] ; then
          if [ "$match_search_result" != "0" ] ; then
            $ENV_BASEDIR/bin/mysql --skip-ssl --host=$DB_HOST --port=$DB_PORT --user=$DB_USER -p$DBP -e "LOAD DATA LOCAL INFILE \"$repro_dir/repro.tar.gz\" REPLACE INTO TABLE regression.repro_data CHARACTER SET BINARY FIELDS TERMINATED BY 'xxxxxthisxxlinexxxshouldxxneverxxeverxxappearxxinxxanyxxfilexxxxxxxxxxxxxxxxxxxxxxxx' ESCAPED BY '' LINES TERMINATED BY 'XXXTHISXXLINEXXSHOULDXXNEVERXXEVERXXAPPEARXXINXXANYXXFILEXXXXXXXXXXXXXXXXXXXX' (data) SET test_id = \"$TEST_ID\""
            echo "##vso[task.complete result=Failed]Failure without matches"
            tar zcf $details_dir/logs.tar.gz $ENV_LOGDIR
          else
            echo "##vso[task.complete result=SucceededWithIssues]Failure with matches"
          fi
        else
          echo "##vso[task.complete result=Succeeded]Pass"
        fi
      displayName: Combination ${{ loop }}
      condition: always()
      env:
        DB_HOST: $(DbHost)
        DB_PORT: $(DbPort)
        DB_USER: $(DbUser)
        DBP: $(DbPwd)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: test-$(Build.BuildNumber).$(System.JobPositionInPhase).${{ loop }}
      displayName: Store test result
      condition: not(succeeded())
      continueOnError: true
