########################################################################
# Collect, store and print test result info
########################################################################

parameters:
  condition: always()
  continueOnError: true
  TRIAL_NO: ''

steps:
  - script: |
      # If Trial ID is defined via parameters, we will use it.
      # Otherwise, we will initialize a variable and will use it within the job
      if [ -n "$PAR_TRIAL_NO" ] ; then
        TRIAL_NO=$PAR_TRIAL_NO
      else
        if [ -z "$TRIAL_NO" ] ; then
          TRIAL_NO=1
        else
          TRIAL_NO=$(($TRIAL_NO+1))
        fi
        echo "##vso[task.setvariable variable=TRIAL_NO]$TRIAL_NO"
      fi
      # If we are using a matrix, we also need a job name for the unique
      # suffix. Otherwise, only trial ID.
      if [ "$SYSTEM_JOBDISPLAYNAME" == "$ENV_REAL_JOBNAME" ] ; then
        RUN_ID=$TRIAL_NO
      else
        RUN_ID=${ENV_REAL_JOBNAME}.${TRIAL_NO}
      fi
      echo "##vso[task.setvariable variable=RUN_ID]$RUN_ID"
      rm -rf $(Build.ArtifactStagingDirectory)/*
      summary_dir=$(Build.ArtifactStagingDirectory)/summary-$(Build.BuildNumber).$RUN_ID
      details_dir=$(Build.ArtifactStagingDirectory)/data-$(Build.BuildNumber).$RUN_ID
      repro_dir=$(Build.ArtifactStagingDirectory)/repro-$(Build.BuildNumber).$RUN_ID
      mkdir -p $summary_dir $details_dir $repro_dir
      cp $ENV_LOGDIR/trial.log $ENV_RQG_HOME/rqg.info $ENV_BASEDIR/server.info $ENV_TOOLBOX_DIR/toolbox.info $summary_dir/
      cp --parents `find $ENV_LOGDIR -name mysql*err* | xargs` $summary_dir/
      cp --parents `find $ENV_LOGDIR -name mbackup*log* | xargs` $summary_dir/
      for f in $ENV_LOGDIR/vardir/mysql.log $ENV_LOGDIR/vardir1/mysql.log ; do
        cp $f $repro_dir/
      done
      for c in `find $ENV_LOGDIR -name core*` ; do
        echo "#################### $c ####################" >> $summary_dir/stacktraces
        echo "#################### $c ####################" >> $details_dir/threads
        echo "#################### $c ####################" >> $details_dir/threads_full
        binary=`gdb --batch --eval-command="bt" 1 $c 2>&1 | grep -a 'Core was generated by' | sed -e 's/^Core was generated by \`\([^ ]*\) .*/\1/'`
        echo $binary >> $summary_dir/stacktraces
        echo $binary >> $details_dir/threads
        echo $binary >> $details_dir/threads_full
        gdb --batch --eval-command="bt" $binary $c  | grep -a -v 'New LWP' >> $summary_dir/stacktraces
        gdb --batch --eval-command="thread apply all bt" $binary $c >> $details_dir/threads
        gdb --batch --eval-command="thread apply all bt full" $binary $c >> $details_dir/threads_full
      done
      tar zcf $details_dir/logs.tar.gz $ENV_LOGDIR
      if [ -e $ENV_LOGDIR/trial.log ] ; then
        result_collection_options="--test-log=$ENV_LOGDIR/trial.log"
      fi
      for d in $ENV_LOGDIR/vardir* ; do
        result_collection_options="$result_collection_options --vardir=$d"
      done
      echo "" >> $summary_dir/test_report
      echo "Test $RUN_ID" >> $summary_dir/test_report
      # First choice: runall prints the status right before exit
      res=`grep -a 'runall.* will exit with exit status' $summary_dir/trial.log | sed -e 's/.*will exit with exit status STATUS_\([A-Z_]*\).*/\1/'`
      # Second choice: runall prints the status of GenTest after GenTest exited. It doesn't include final checks
      if [ -z "$res" ] ; then
        res=`grep -a 'GenTest exited with exit status' $summary_dir/trial.log | sed -e 's/.*exited with exit status STATUS_\([A-Z_]*\).*/\1/'`
      fi
      # Last choice: GenTest prints the status before exiting
      if [ -z "$res" ] ; then
        res=`grep -a 'GenTest will exit with exit status' $summary_dir/trial.log | sed -e 's/.*will exit with exit status STATUS_\([A-Z_]*\).*/\1/'`
      fi
      echo "Test result:" $res >> $summary_dir/test_report
      export TEST_RESULT=$res
      echo "Trigger ID:" $(System.DefinitionId)-$(Build.BuildId)-$(Build.BuildNumber).$RUN_ID >> $summary_dir/test_report
      echo "-------------------------------------" >> $summary_dir/test_report
      echo "" >> $summary_dir/test_report
      cp $summary_dir/server.info $repro_dir/repro.info
      rqg_cmd=`grep -a -A 1 'Final command line' $summary_dir/trial.log | tail -n 1`
      mysqld_options=""
      for o in $rqg_cmd ; do
        if expr match "$o" "--mysqld" > /dev/null ; then
          mysqld_options="$mysqld_options $o"
        fi
      done
      echo "" >> $repro_dir/repro.info
      echo "RQG command line: $rqg_cmd" >> $repro_dir/repro.info
      echo "MySQLd options: $mysqld_options" >> $repro_dir/repro.info
      echo `cat $summary_dir/rqg.info` `cat $summary_dir/toolbox.info` >> $summary_dir/test_report
      cat $repro_dir/repro.info >> $summary_dir/test_report
      export TEST_ID=$(Build.BuildId).$RUN_ID
      echo >> $summary_dir/test_report
      $ENV_TOOLBOX_DIR/scripts/collect_rqg_result_info.sh $result_collection_options > $summary_dir/result_info
      echo "" >> $summary_dir/result_info
      echo "Trigger ID:" $(System.DefinitionId)-$(Build.BuildId)-$(Build.BuildNumber).$RUN_ID >> $summary_dir/result_info
      SERVER_BRANCH=$ENV_SERVER_BRANCH perl $ENV_RQG_HOME/util/check_for_known_bugs.pl --signatures=$ENV_RQG_HOME/data/bug_signatures $summary_dir/result_info >> $summary_dir/test_report
      echo >> $summary_dir/test_report
      echo "#####################################" >> $summary_dir/test_report
      cat $summary_dir/result_info >> $summary_dir/test_report
      #      for f in `find $summary_dir -name mysql*.err*` ; do
      #        echo "========== $f ==========" >> $summary_dir/test_report
      #        echo "Throttling:" >> $summary_dir/test_report
      #        echo `grep -a -c 'Table .* is marked as crashed and should be repaired' $f` "occurrence(s) of 'Table .* is marked as crashed and should be repaired'" >> $summary_dir/test_report
      #        echo `grep -a -c 'mysqld: The table .* is full' $f` "occurrence(s) of 'mysqld: The table .* is full'" >> $summary_dir/test_report
      #        echo `grep -a -c 'Failed to load table .* which has a foreign key constraint with table .*' $f` "occurrence(s) of 'Failed to load table .* which has a foreign key constraint with table .*'" >> $summary_dir/test_report
      #        echo `grep -a -c "mysqld: Can't find record in" $f` "occurrence(s) of 'mysqld: Can't find record in'" >> $summary_dir/test_report
      #        echo "" >> $summary_dir/test_report
      #        cat $f | \
      #          grep -a -v -f $ENV_TOOLBOX_DIR/travis/server_warnings.supp | \
      #          grep -a -v "\[Note\]" | \
      #          grep -a -v "\] Query: " | \
      #         grep -a -v 'Table .* is marked as crashed and should be repaired' | \
      #          grep -a -v 'mysqld: The table .* is full' | \
      #          grep -a -v 'Failed to load table .* which has a foreign key constraint with table .*' | \
      #          grep -a -v "mysqld: Can't find record in" | \
      #          grep -a -v "^$" | \
      #          grep -a -v "server_audit: SysLog facility was changed" | \
      #          cut -c 1-4096 >> $summary_dir/test_report
      #        echo "" >> $summary_dir/test_report
      #      done
      echo "#####################################" >> $summary_dir/test_report
      cat $summary_dir/test_report
    displayName: Test result ${{ parameters.TRIAL_NO }}
    condition: ${{ parameters.condition }}
    continueOnError: ${{ parameters.continueOnError }}
    env:
      PAR_TRIAL_NO: ${{ parameters.TRIAL_NO }}
      DB_HOST: $(DbHost)
      DB_PORT: $(DbPort)
      DB_USER: $(DbUser)
      DBP: $(DbPwd)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: test-$(Build.BuildNumber).$(RUN_ID)
    displayName: Store test result ${{ parameters.TRIAL_NO }}
    condition: ${{ parameters.condition }}
    continueOnError: ${{ parameters.continueOnError }}
