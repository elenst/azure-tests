trigger: none

  # The general log is located in a different pipeline/build.
  #
  # _TRIGGER_ID consists has a form of PipelineID-BuildId-ReproArtifactSuffix,
  # e.g. 10-837-20190220.1.003.1
  # Repro info is located in artifact test-<ReproArtifactSuffix>/repro-<ReproArtifactSuffix>
  # We don't require artifact name for the build, because it's always 'build'

  # Other parameters, which we (might) need in any case
  # _PRESERVE_QUERY (useful for speeding up the process)
  # _SEARCH_PATTERN (needed for all practical purposes, although technically not mandatory)
  # MTR_OPTIONS (optional)
  # CONVERSION_OPTIONS (optional, --convert-to-ps and such)
  # SIMPLIFICATION_OPTIONS (optional, --mode, --max-chunk, --trials=X)
  # _TEST_COMMENT (optional, just a convenience for easier detecting what it was about)
  
jobs:

#########
- job: Simplify
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu 20.04'
  strategy:
    parallel: 1

  steps:

  - script: |
      if [ -n "$_TEST_COMMENT" ] ; then
        echo "#####################"
        echo $_TEST_COMMENT
        echo "#####################"
      fi
      if [ -z "$_TRIGGER_ID" ] ; then
        echo "##vso[task.complete result=Failed]\"_TRIGGER_ID\" has not been specified"
      fi
      IFS='-' read -r -a ids <<< $_TRIGGER_ID
      TRIGGERING_PIPELINE_ID=${ids[0]}
      TRIGGERING_BUILD_ID=${ids[1]}
      TRIGGERING_ARTIFACT_ID=${ids[2]}
      IFS='.' read -r -a ids2 <<< $TRIGGERING_ARTIFACT_ID
      TRIGGERING_TEST_ID=${ids2[2]}
      echo "##vso[task.setvariable variable=TRIGGERING_PIPELINE_ID]$TRIGGERING_PIPELINE_ID"
      echo "##vso[task.setvariable variable=TRIGGERING_BUILD_ID]$TRIGGERING_BUILD_ID"
      echo "##vso[task.setvariable variable=TRIGGERING_ARTIFACT_ID]$TRIGGERING_ARTIFACT_ID"
      echo "##vso[task.setvariable variable=TRIGGERING_TEST_ID]$TRIGGERING_TEST_ID"
      echo "##vso[task.setvariable variable=BASEDIR]$HOME/server"
      echo "##vso[task.setvariable variable=RQG_HOME]$HOME/rqg"
      echo "##vso[task.setvariable variable=TOOLBOX_DIR]$HOME/toolbox"
      echo "Test comment:          " $_TEST_COMMENT
      echo "Pattern to preserve:   " $_PRESERVE_QUERY
      echo "Search pattern:        " $_SEARCH_PATTERN
      echo "Trigger ID:            " $_TRIGGER_ID
      echo "Triggering pipeline ID:" $TRIGGERING_PIPELINE_ID
      echo "Triggering build ID:   " $TRIGGERING_BUILD_ID
      echo "Triggering artifact ID:" $TRIGGERING_ARTIFACT_ID
      echo "Triggering test ID:    " $TRIGGERING_TEST_ID
      echo "Conversion options:    " $CONVERSION_OPTIONS
      echo "Simplification options:" $SIMPLIFICATION_OPTIONS
      echo "MTR options:           " $MTR_OPTIONS
    displayName: 'Check configuration'

# Test info goes to a different dir, as we will only need a portion of it to republish
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'MariaDB tests'
      pipeline: '$(TRIGGERING_PIPELINE_ID)'
      buildVersionToDownload: 'specific'
      buildId: '$(TRIGGERING_BUILD_ID)'
      downloadType: 'single'
      artifactName: 'test-$(TRIGGERING_ARTIFACT_ID)'
      itemPattern: 'test-$(TRIGGERING_ARTIFACT_ID)/repro-$(TRIGGERING_ARTIFACT_ID)/**'
      downloadPath: '$(System.ArtifactsDirectory)'
    name: get_repro_info
    displayName: 'Download repro info from pipeline'

# The build goes directly to ArtifactsDirectory, as we'll need to publish it again
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'MariaDB tests'
      pipeline: '$(TRIGGERING_PIPELINE_ID)'
      buildVersionToDownload: 'specific'
      buildId: '$(TRIGGERING_BUILD_ID)'
      downloadType: 'single'
      artifactName: 'build'
      downloadPath: '$(System.ArtifactsDirectory)' 
    name: get_binaries
    displayName: 'Download binaries from pipeline'

  - script: |
      ls -l $HOME/test_info/
      mkdir $BASEDIR
      cd $BASEDIR
      tar zxf $(System.ArtifactsDirectory)/build/build-*.tar.gz
    name: unpack_binaries
    displayName: 'Unpack server binaries'

  - template: steps/install-deb-packages.yml
    parameters:
      INSTALLATION_SET: 'runtime'

  # Get tools, extract repro info, convert general log into MTR and run simplification
  - script: |
      set -o pipefail
      git clone "https://github.com/MariaDB/randgen" --branch=elenst-dev $RQG_HOME
      git clone "https://github.com/elenst/mariadb-toolbox" $TOOLBOX_DIR
      REPRO_DIR=$(System.ArtifactsDirectory)/repro
      mv $(System.ArtifactsDirectory)/test-$(TRIGGERING_ARTIFACT_ID)/repro-$(TRIGGERING_ARTIFACT_ID) $REPRO_DIR
      cd $BASEDIR/mysql-test
      default_repro_options="--mem --mysqld=--innodb --mysqld=--default-storage-engine=InnoDB --mysqld=--partition --mysqld=--loose-innodb-stats-persistent=on --mysqld=--character-set-server=utf8 --mysqld=--max-allowed-packet=1G --mysqld=--innodb-buffer-pool-size=128M --mysqld=--innodb-log-file-size=48M --mysqld=--loose-max-statement-time=30 --mysqld=--innodb-lock-wait-timeout=5 --mysqld=--lock-wait-timeout=10 --mysqld=--log_bin_trust_function_creators=OFF --mysqld=--key_buffer_size=128M --mysqld=--performance-schema=OFF --testcase-timeout=120 --mysqld=--secure-file-priv=''"
      if ../bin/mysqld --version | grep -E '10.[456]' ; then
        default_repro_options="$default_repro_options --mysqld=--use_stat_tables=PREFERABLY"
      elif ../bin/mysqld --version | grep -E '10.[7891]' ; then
        default_repro_options="$default_repro_options --mysqld=--use_stat_tables=PREFERABLY --mysqld=--histogram-type=DOUBLE_PREC_HB"
      fi
      mysqld_repro_options=`grep 'MySQLd options' $REPRO_DIR/repro.info | sed -e "s/MySQLd options://" | sed -e "s/ENV_RQG_HOME/RQG_HOME/g"`
      mtr_repro_options=`grep 'MTR options' $REPRO_DIR/repro.info | sed -e "s/MTR options://"`
      #cd $BASEDIR
      #patch -p 1 < $TOOLBOX_DIR/mtr/mtr_default_server.patch
      mkdir suite/bug
      if [ -e $REPRO_DIR/mysql.log.gz ] ; then
        gunzip $REPRO_DIR/mysql.log.gz
      fi
      perl $TOOLBOX_DIR/scripts/mysql_log_to_mysqltest.pl --data-location=$RQG_HOME/data/blobs $CONVERSION_OPTIONS $REPRO_DIR/mysql.log | sed  -e "s/\(IMMEDIATE\|FROM\) ' \//\1 '' \//g" | sed  -e "s/\(IMMEDIATE\|FROM\) '\$/\1 ''/g" > $BASEDIR/mysql-test/suite/bug/repro.test
      echo "perl $TOOLBOX_DIR/scripts/simplify-mtr-test.pl --suitedir=$BASEDIR/mysql-test/suite/bug --testcase=repro $SIMPLIFICATION_OPTIONS --options=\"$default_repro_options $mysqld_repro_options $mtr_repro_options $MTR_OPTIONS $MYSQLD_OPTIONS\" \$*" > $REPRO_DIR/simplification_cmd
      if [ -n "$_SEARCH_PATTERN" ] ; then
        echo `cat $REPRO_DIR/simplification_cmd` "--output=\"$_SEARCH_PATTERN\"" > $REPRO_DIR/simplification_cmd
      fi
      if [ -n "$_PRESERVE_QUERY" ] ; then
        echo `cat $REPRO_DIR/simplification_cmd` "--preserve-query=\"$_PRESERVE_QUERY\"" > $REPRO_DIR/simplification_cmd
      fi
      if [ -n "$DB_HOST" ] ; then
        id=`date '+%s'`
        test_id="${TRIGGERING_BUILD_ID}.${TRIGGERING_TEST_ID}"
        $BASEDIR/bin/mysql --host=$DB_HOST --port=$DB_PORT --user=$DB_USER -p$DBP -e "REPLACE INTO regression.repro_status (id, host, test_id, screen, search_pattern, status) VALUES ($id,'azure29','$test_id','$(Build.BuildId)', '$_SEARCH_PATTERN', 'Simplification started')"
      fi
      . $REPRO_DIR/simplification_cmd
      res=$?
      cp suite/bug/repro.test $(Build.ArtifactStagingDirectory)/first_test.test
      tar zcf repro.output.tar.gz repro.output var/log/mysqld.1.err suite/bug
      mv repro.output.tar.gz $(Build.ArtifactStagingDirectory)/
      last_test=`ls -tr $BASEDIR/mysql-test/suite/bug/repro.test.reproducible.* | tail -n 1`
      cp $last_test $REPRO_DIR/last_test.test
      echo "#######################################################################"
      notes_file=$REPRO_DIR/repro.notes
      if [ -n "$_TEST_COMMENT" ] ; then
        echo $_TEST_COMMENT >> $notes_file
        echo "" >> $notes_file
      fi
      echo "current simplification ID $(System.DefinitionId)-$(Build.BuildId)"
      echo "We tried to reproduce the failure happened in $TRIGGERING_ARTIFACT_ID of pipeline $TRIGGERING_PIPELINE_ID, build $TRIGGERING_BUILD_ID)" >> $notes_file
      echo "initial trigger ID $_TRIGGER_ID" >> $notes_file
      echo "on the server " `head -n 2 $REPRO_DIR/repro.info` >> $notes_file
      echo "while searching for pattern:" >> $notes_file
      echo "\"$_SEARCH_PATTERN\"" >> $notes_file
      echo "using simplification command:" >> $notes_file
      echo "Preserved query pattern:" >> $notes_file
      echo "\"$_PRESERVE_QUERY\"" >> $notes_file
      cat $notes_file
      cat $REPRO_DIR/simplification_cmd
      echo ""
      echo "RESULT: $res"
      echo "#######################################################################"
      echo ""
      if [ "$res" == "0" ] ; then
        status="SUCCEEDED"
      elif [ "$res" == "1" ] ; then
        echo "##vso[task.complete result=Failed]Could not reproduce the failure"
        status="FAILED"
      elif [ "$res" == "2" ] ; then
        echo "##vso[task.complete result=SucceededWithIssues]The process ended due to approaching timeout"
        status="Part-SUCCEEDED"
      fi
      if [ -n "$DB_HOST" ] ; then
        $BASEDIR/bin/mysql --host=$DB_HOST --port=$DB_PORT --user=$DB_USER -p$DBP -e "REPLACE INTO regression.repro_status (id, host, test_id, screen, search_pattern, status) VALUES ($id,'azure29','$test_id','$(Build.BuildId)', '$_SEARCH_PATTERN', '$status')"
      fi
    name: simplify
    displayName: 'Prepare and run simplification'
    env:
      DB_HOST: $(DbHost)
      DB_PORT: $(DbPort)
      DB_USER: $(DbUser)
      DBP: $(DbPwd)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/
      artifactName: data
    displayName: 'Store test file and output'
    condition: always()
