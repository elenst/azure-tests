# Test different steps and configurations without running big jobs

trigger: none

jobs:

- job: check_env_step
  pool:
    vmImage: 'Ubuntu 20.04'
  steps:
  - template: steps/env.yml
  - script: printenv
  - script: |
      set -x
      df -kT
      ulimit -a
      ulimit -Ha
      uname -a
      ls -l /usr/lib/x86_64-linux-gnu/libcurl*
      sudo apt-get install -y libcurl4 libcurl4-openssl-dev libdbd-mysql-perl
      dpkg -l | grep dbd
      ls -l /usr/lib/x86_64-linux-gnu/libcurl*
      cat /etc/os-release
      cat /proc/cpuinfo
      top -b -n 1
      dpkg -l | grep -E 'cpp|gcc|clang|libasan'
      gcc --version
      clang --version
      sudo apt-get install clang
      which gcc
      which clang
      ls -l /usr/bin/gcc*
      ls -l /usr/gin/g++*
      #for i in /etc/alternatives/*; do 
      #  LANG=C update-alternatives --display "${i#/etc/alternatives/}"
      #done 2>/dev/null
      #sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 50
      #sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 50
      #sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-6 50
      #gcc --version
      #g++ --version
      #gcov --version
      sudo apt-get install -y libzstd1
      dpkg-query -L libzstd1
      sudo apt-get install -y libzstd-dev
      dpkg-query -L libzstd-dev

########################################################################
# Experiments with templates (disabled now by condition: false)
#
#- template: jobs/setenv.yml
#  parameters:
#    condition: false
#    taskname: env
#    rqgOptions: '--duration=300'

#- job: check_after_job
#  dependsOn: setenv
#  steps:
#  - script: |
#      echo serverBranch: $(serverBranch)
#      echo rqgBranch: $(rqgBranch)
#      echo toolboxBranch: $(toolboxBranch)
#      echo cmakeOptions: $(cmakeOptions)
#      echo rqgOptions: $(rqgOptions)
#      echo mysqldOptions: $(mysqldOptions)
#      echo baseDir: $(baseDir)
#      echo toolboxDir: $(toolboxDir)
#      echo rqgHome: $(rqgHome)
#      echo logDir: $(logDir)
#  variables:
#    serverBranch: $[ dependencies.setenv.outputs['env.serverBranch' ] ]
#    rqgBranch: $[ dependencies.setenv.outputs['env.rqgBranch' ] ]
#    toolboxBranch: $[ dependencies.setenv.outputs['env.toolboxBranch' ] ]
#    cmakeOptions: $[ dependencies.setenv.outputs['env.cmakeOptions' ] ]
#    rqgOptions: $[ dependencies.setenv.outputs['env.rqgOptions' ] ]
#    mysqldOptions: $[ dependencies.setenv.outputs['env.mysqldOptions' ] ]
#    baseDir: $[ dependencies.setenv.outputs['env.baseDir' ] ]
#    toolboxDir: $[ dependencies.setenv.outputs['env.toolboxDir' ] ]
#    rqgHome: $[ dependencies.setenv.outputs['env.rqgHome' ] ]
#    logDir: $[ dependencies.setenv.outputs['env.logDir' ] ]

#- job: check_after_task
#  condition: false
#  steps:
#  - template: steps/env.yml
#  - script: |
#      echo serverBranch: $(env.serverBranch)
#      echo rqgBranch: $(env.rqgBranch)
#      echo toolboxBranch: $(env.toolboxBranch)
#      echo cmakeOptions: $(env.cmakeOptions)
#      echo rqgOptions: $(env.rqgOptions)
#      echo mysqldOptions: $(env.mysqldOptions)
#      echo baseDir: $(env.baseDir) $(env.BASEDIR) $ENV_BASEDIR
#      echo toolboxDir: $(env.toolboxDir)
#      echo rqgHome: $(env.rqgHome)
#      echo logDir: $(env.logDir)

########################################################################
# Experiments with server building and uploading
# (disabled by condition: false)

- template: jobs/prepare-server.yml
  parameters:
    name: 'Download_or_Build_Server'
    condition: false
#    serverBranch: $(serverBranch)
    CMAKE_OPTIONS: '-DPLUGIN_CASSANDRA=NO -DPLUGIN_CONNECT=NO -DPLUGIN_FEDERATED=NO -DPLUGIN_FEDERATEDX=NO -DPLUGIN_MROONGA=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_SPHINX=NO -DPLUGIN_SPIDER=NO -DPLUGIN_TOKUDB=NO -DWITH_MARIABACKUP=OFF'
    CMAKE_BUILD_TYPE: Debug

- template: jobs/upload-to-ftp.yml
  parameters:
    condition: false
    dependencies:
    - 'Download_or_Build_Server'
#    condition: and(succeeded(), ne(dependencies.Download_or_Build_Server.outputs['ftp_download.BINARIES_FROM_FTP'], 'true'))
